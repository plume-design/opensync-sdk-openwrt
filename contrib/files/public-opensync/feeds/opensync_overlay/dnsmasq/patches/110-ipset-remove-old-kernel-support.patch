--- a/src/ipset.c
+++ b/src/ipset.c
@@ -85,12 +85,7 @@
 
 void ipset_init(void)
 {
-  old_kernel = (daemon->kernel_version < KERNEL_VERSION(2,6,32));
-  
-  if (old_kernel && (ipset_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) != -1)
-    return;
-  
-  if (!old_kernel && 
+  if ( 
       (buffer = safe_malloc(BUFF_SZ)) &&
       (ipset_sock = socket(AF_NETLINK, SOCK_RAW, NETLINK_NETFILTER)) != -1 &&
       (bind(ipset_sock, (struct sockaddr *)&snl, sizeof(snl)) != -1))
@@ -147,62 +142,12 @@
   return errno == 0 ? 0 : -1;
 }
 
-
-static int old_add_to_ipset(const char *setname, const union all_addr *ipaddr, int remove)
-{
-  socklen_t size;
-  struct ip_set_req_adt_get {
-    unsigned op;
-    unsigned version;
-    union {
-      char name[IPSET_MAXNAMELEN];
-      uint16_t index;
-    } set;
-    char typename[IPSET_MAXNAMELEN];
-  } req_adt_get;
-  struct ip_set_req_adt {
-    unsigned op;
-    uint16_t index;
-    uint32_t ip;
-  } req_adt;
-  
-  if (strlen(setname) >= sizeof(req_adt_get.set.name)) 
-    {
-      errno = ENAMETOOLONG;
-      return -1;
-    }
-  
-  req_adt_get.op = 0x10;
-  req_adt_get.version = 3;
-  strcpy(req_adt_get.set.name, setname);
-  size = sizeof(req_adt_get);
-  if (getsockopt(ipset_sock, SOL_IP, 83, &req_adt_get, &size) < 0)
-    return -1;
-  req_adt.op = remove ? 0x102 : 0x101;
-  req_adt.index = req_adt_get.set.index;
-  req_adt.ip = ntohl(ipaddr->addr4.s_addr);
-  if (setsockopt(ipset_sock, SOL_IP, 83, &req_adt, sizeof(req_adt)) < 0)
-    return -1;
-  
-  return 0;
-}
-
-
-
 int add_to_ipset(const char *setname, const union all_addr *ipaddr, int flags, int remove)
 {
   int ret = 0, af = AF_INET;
 
   if (flags & F_IPV6)
-    {
       af = AF_INET6;
-      /* old method only supports IPv4 */
-      if (old_kernel)
-	{
-	  errno = EAFNOSUPPORT ;
-	  ret = -1;
-	}
-    }
   
   if (ret != -1) 
     ret = old_kernel ? old_add_to_ipset(setname, ipaddr, remove) : new_add_to_ipset(setname, ipaddr, af, remove);
