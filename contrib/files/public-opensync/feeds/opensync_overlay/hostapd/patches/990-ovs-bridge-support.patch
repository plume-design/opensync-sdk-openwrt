Index: hostapd-2020-06-08-5a8b3662/src/drivers/linux_ioctl.c
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/src/drivers/linux_ioctl.c
+++ hostapd-2020-06-08-5a8b3662/src/drivers/linux_ioctl.c
@@ -15,6 +15,64 @@
 #include "common/linux_bridge.h"
 #include "linux_ioctl.h"
 
+#include <sys/wait.h>
+
+#define run_prog(p, ...) ({ \
+   int rc = -1, status; \
+   pid_t pid = fork(); \
+   if (!pid) \
+       exit(execl(p, p, ##__VA_ARGS__, NULL)); \
+   if (pid < 0) {\
+       rc = -1;\
+   } else {\
+       while ((rc = waitpid(pid, &status, 0)) == -1 && errno == EINTR); \
+       rc = (rc == pid && WIFEXITED(status)) ? WEXITSTATUS(status) : -1; \
+   }\
+   rc;\
+})
+
+static
+int does_br_exists(const char *brname)
+{
+   char buf[128];
+
+   int retval = 0;
+   FILE *ovs = NULL;
+
+   ovs = popen("/usr/bin/ovs-vsctl list-br", "r");
+
+   while (fgets(buf, sizeof(buf), ovs) != NULL)
+   {
+       buf[strcspn(buf, "\n")] = '\0';
+
+       if (strcmp(buf, brname) == 0)
+       {
+           retval = 1;
+           break;
+       }
+   }
+
+error:
+   if (ovs != NULL) pclose(ovs);
+
+   return retval;
+}
+
+static
+int ovs_br_add_if(const char *brname, const char *ifname)
+{
+   if (run_prog("/usr/bin/ovs-vsctl", "add-port", brname, ifname))
+       return -1;
+   return 0;
+}
+
+static
+int ovs_br_del_if(const char *brname, const char *ifname)
+{
+   if (run_prog("/usr/bin/ovs-vsctl", "del-port", brname, ifname))
+       return -1;
+   return 0;
+}
 
 int linux_set_iface_flags(int sock, const char *ifname, int dev_up)
 {
@@ -152,6 +210,10 @@ int linux_br_add_if(int sock, const char
 	struct ifreq ifr;
 	int ifindex;
 
+    if(does_br_exists(brname)) {
+        return ovs_br_add_if(brname,ifname);
+    }
+
 	ifindex = if_nametoindex(ifname);
 	if (ifindex == 0)
 		return -1;
@@ -177,6 +239,10 @@ int linux_br_del_if(int sock, const char
 	struct ifreq ifr;
 	int ifindex;
 
+    if(does_br_exists(brname)) {
+        return ovs_br_del_if(brname,ifname);
+    }
+
 	ifindex = if_nametoindex(ifname);
 	if (ifindex == 0)
 		return -1;
@@ -198,12 +264,44 @@ int linux_br_get(char *brname, const cha
 {
 	char path[128], brlink[128], *pos;
 	ssize_t res;
+    char cmd[128], *tmp;
+    FILE *ovs;
+
+    /*
+     * Native linux bridges have a brport/bridge entry in the interface
+     * sys folder
+     */
+    os_snprintf(path, sizeof(path),
+           "/sys/class/net/%s/brport/bridge",
+            ifname);
 
-	os_snprintf(path, sizeof(path), "/sys/class/net/%s/brport/bridge",
-		    ifname);
 	res = readlink(path, brlink, sizeof(brlink));
-	if (res < 0 || (size_t) res >= sizeof(brlink))
-		return -1;
+    if(res < 0)
+    {
+        /*
+         * Interface is not in a native linux bridge, check if it is an OVS
+         * bridge -- unfortunately there's no other simple way but to run
+         * ovs-vsctl port-to-br
+         */
+        os_snprintf(cmd, sizeof(cmd), "/usr/bin/ovs-vsctl port-to-br %s", ifname);
+        ovs = popen(cmd, "r");
+        /* Failed to execute, assume OVS is not installed */
+        if (ovs == NULL) return -1;
+
+        tmp = fgets(brname, IFNAMSIZ, ovs);
+        pclose(ovs);
+
+        if (tmp == NULL || strlen(brname) <= 0) return -1;
+
+        /* Chop new lines */
+        if ((tmp = strchr(brname, '\n'))) *tmp = '\0';
+        return 0;
+    }
+
+    /*
+     * Extract the linux bridge name from the symbolic link
+     */
+
 	brlink[res] = '\0';
 	pos = os_strrchr(brlink, '/');
 	if (pos == NULL)
