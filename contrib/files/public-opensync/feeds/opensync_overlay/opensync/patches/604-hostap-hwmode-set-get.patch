From: Shubham Pawar <p.shubham@globaledgesoft.com>
Subject: [PATCH] lib/hostap: hw_mode set/get support

--- a/src/lib/hostap/inc/opensync-hapd.h
+++ b/src/lib/hostap/inc/opensync-hapd.h
@@ -37,6 +37,11 @@ struct hapd {
     char conf[4096];
     char psks[4096];
     int respect_multi_ap;
+    int ieee80211n;
+    int ieee80211ac;
+    int ieee80211ax;
+    char htcaps[256];
+    char vhtcaps[512];
     void (*sta_connected)(struct hapd *hapd, const char *mac, const char *keyid);
     void (*sta_disconnected)(struct hapd *hapd, const char *mac);
     void (*ap_enabled)(struct hapd *hapd);
diff --git a/src/lib/hostap/src/hapd.c b/src/lib/hostap/src/hapd.c
index e01db43d..b9ba21eb 100644
--- a/src/lib/hostap/src/hapd.c
+++ b/src/lib/hostap/src/hapd.c
@@ -321,6 +321,36 @@ hapd_map_int2str(int i)
     return "none";
 }
 
+static int
+hapd_11n_enabled(const struct schema_Wifi_Radio_Config *rconf)
+{
+    if (!rconf->hw_mode_exists) return 0;
+    if (   (!strcmp(rconf->hw_mode, "11ax"))
+        || (!strcmp(rconf->hw_mode, "11ac"))
+        || (!strcmp(rconf->hw_mode, "11n")))
+        return 1;
+    return 0;
+}
+
+static int
+hapd_11ac_enabled(const struct schema_Wifi_Radio_Config *rconf)
+{
+    if (!rconf->hw_mode_exists) return 0;
+    if (   (!strcmp(rconf->hw_mode, "11ax"))
+        || (!strcmp(rconf->hw_mode, "11ac")))
+        return 1;
+    return 0;
+}
+
+static int
+hapd_11ax_enabled(const struct schema_Wifi_Radio_Config *rconf)
+{
+    if (!rconf->hw_mode_exists) return 0;
+    if (!strcmp(rconf->hw_mode, "11ax"))
+        return 1;
+    return 0;
+}
+
 static int
 hapd_conf_gen_psk(struct hapd *hapd,
                   const struct schema_Wifi_VIF_Config *vconf)
@@ -377,6 +407,92 @@ hapd_conf_gen_psk(struct hapd *hapd,
     return 0;
 }
 
+static const char *
+hapd_ht_caps(const struct schema_Wifi_Radio_Config *rconf)
+{
+    if (!rconf->ht_mode_exists) return "";
+    if (!strcmp(rconf->ht_mode, "HT20")) {
+        return "[HT20]";
+    }
+    if (   (!strcmp(rconf->ht_mode, "HT40"))
+        || (!strcmp(rconf->ht_mode, "HT80"))
+        || (!strcmp(rconf->ht_mode, "HT160"))) {
+        switch (rconf->channel) {
+            case 0:
+                return "[HT40+] [HT40-]";
+            case 1 ... 7:
+            case 36:
+            case 44:
+            case 52:
+            case 60:
+            case 100:
+            case 108:
+            case 116:
+            case 124:
+            case 132:
+            case 140:
+            case 149:
+            case 157:
+                return "[HT40+]";
+            case 8 ... 13:
+            case 40:
+            case 48:
+            case 56:
+            case 64:
+            case 104:
+            case 112:
+            case 120:
+            case 128:
+            case 136:
+            case 144:
+            case 153:
+            case 161:
+                return "[HT40-]";
+            default:
+                LOG(TRACE,
+                    "%s: %d is not a valid channel",
+                    rconf->if_name, rconf->channel);
+                return "";
+        }
+    }
+
+    LOGT("%s: %s is incorrect htmode", __func__, rconf->ht_mode);
+    return "";
+}
+
+static int
+hapd_vht_oper_chwidth(const struct schema_Wifi_Radio_Config *rconf)
+{
+    if (!rconf->ht_mode_exists) return 0;
+    if (   (!strcmp(rconf->ht_mode, "HT20"))
+        || (!strcmp(rconf->ht_mode, "HT40")))
+        return 0;
+    else if (!strcmp(rconf->ht_mode, "HT80"))
+        return 1;
+    else if (!strcmp(rconf->ht_mode, "HT160"))
+        return 2;
+
+    LOGT("%s: %s is incorrect htmode", __func__, rconf->ht_mode);
+    return 0;
+}
+
+static int
+hapd_vht_oper_centr_freq_idx(const struct schema_Wifi_Radio_Config *rconf)
+{
+    const int width = atoi(strlen(rconf->ht_mode) > 2 ? rconf->ht_mode + 2 : "20");
+    const int *chans = unii_5g_chan2list(rconf->channel, width);
+    int sum = 0;
+    int cnt = 0;
+
+    while (*chans) {
+        sum += *chans;
+        cnt++;
+        chans++;
+    }
+    return sum / cnt;
+}
+
+
 int
 hapd_conf_gen(struct hapd *hapd,
               const struct schema_Wifi_Radio_Config *rconf,
@@ -412,10 +528,30 @@ hapd_conf_gen(struct hapd *hapd,
     csnprintf(&buf, &len, "%s", hapd->respect_multi_ap ? "" : "#");
     csnprintf(&buf, &len, "multi_ap=%d\n", hapd_map_str2int(vconf));
     csnprintf(&buf, &len, "uapsd_advertisement_enabled=%d\n", vconf->uapsd_enable);
+    csnprintf(&buf, &len, "%s", hapd->ieee80211n ? "" : "#");
+    csnprintf(&buf, &len, "ieee80211n=%d\n", hapd_11n_enabled(rconf));
+    csnprintf(&buf, &len, "%s", hapd->ieee80211ac ? "" : "#");
+    csnprintf(&buf, &len, "ieee80211ac=%d\n", hapd_11ac_enabled(rconf));
+    csnprintf(&buf, &len, "%s", hapd->ieee80211ax ? "" : "#");
+    csnprintf(&buf, &len, "ieee80211ax=%d\n", hapd_11ax_enabled(rconf));
 
     /* FIXME: ieee80211n, iee80211ac, ieee80211ax is missing, also min_hw_mode..
      * perhaps some of this needs to be scheduled for wireless api rework
      */
+    if (hapd_11ac_enabled(rconf))
+        if (strcmp(rconf->freq_band, "2.4G")) {
+            csnprintf(&buf, &len, "vht_oper_chwidth=%d\n",
+                      hapd_vht_oper_chwidth(rconf));
+            csnprintf(&buf, &len, "vht_oper_centr_freq_seg0_idx=%d\n",
+                      hapd_vht_oper_centr_freq_idx(rconf));
+        }
+
+    if (hapd->ieee80211n)
+        csnprintf(&buf, &len, "ht_capab=%s %s\n",
+                  hapd->htcaps, hapd_ht_caps(rconf));
+
+    if (hapd->ieee80211ac)
+        csnprintf(&buf, &len, "vht_capab=%s\n", hapd->vhtcaps);
 
     /* FIXME: this should be able to implement min_hw_mode on setups where
      * hostapd's driver respects things like: supported_rates, basic_rates,
@@ -769,7 +905,10 @@ hapd_conf_strip(char *buf)
      * have changed and therefore should not be reloaded.
      */
     while ((line = strsep(&lines, "\n")))
-        if (strstr(line, "channel=") != line)
+        if (   (strstr(line, "channel=") != line)
+            && (strstr(line, "ht_capab=") != line)
+            && (strstr(line, "vht_oper_chwidth=") != line)
+            && (strstr(line, "vht_oper_centr_freq_seg0_idx=") != line))
             csnprintf(&ptr, &len, "%s\n", line);
     strscpy(buf, tmp, buf_size); /* its guaranteed to fit */
     return buf;
